// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/scanoss/scanoss.lui/backend/main/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockResultFilter is an autogenerated mock type for the ResultFilter type
type MockResultFilter struct {
	mock.Mock
}

type MockResultFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResultFilter) EXPECT() *MockResultFilter_Expecter {
	return &MockResultFilter_Expecter{mock: &_m.Mock}
}

// IsValid provides a mock function with given fields: result
func (_m *MockResultFilter) IsValid(result entities.Result) bool {
	ret := _m.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for IsValid")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(entities.Result) bool); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockResultFilter_IsValid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValid'
type MockResultFilter_IsValid_Call struct {
	*mock.Call
}

// IsValid is a helper method to define mock.On call
//   - result entities.Result
func (_e *MockResultFilter_Expecter) IsValid(result interface{}) *MockResultFilter_IsValid_Call {
	return &MockResultFilter_IsValid_Call{Call: _e.mock.On("IsValid", result)}
}

func (_c *MockResultFilter_IsValid_Call) Run(run func(result entities.Result)) *MockResultFilter_IsValid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Result))
	})
	return _c
}

func (_c *MockResultFilter_IsValid_Call) Return(_a0 bool) *MockResultFilter_IsValid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResultFilter_IsValid_Call) RunAndReturn(run func(entities.Result) bool) *MockResultFilter_IsValid_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResultFilter creates a new instance of MockResultFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResultFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResultFilter {
	mock := &MockResultFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
