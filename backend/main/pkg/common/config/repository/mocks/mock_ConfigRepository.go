// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/scanoss/scanoss.lui/backend/main/pkg/common/config/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockConfigRepository is an autogenerated mock type for the ConfigRepository type
type MockConfigRepository struct {
	mock.Mock
}

type MockConfigRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigRepository) EXPECT() *MockConfigRepository_Expecter {
	return &MockConfigRepository_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields:
func (_m *MockConfigRepository) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigRepository_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockConfigRepository_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockConfigRepository_Expecter) Init() *MockConfigRepository_Init_Call {
	return &MockConfigRepository_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockConfigRepository_Init_Call) Run(run func()) *MockConfigRepository_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigRepository_Init_Call) Return(_a0 error) *MockConfigRepository_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigRepository_Init_Call) RunAndReturn(run func() error) *MockConfigRepository_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields:
func (_m *MockConfigRepository) Read() (entities.Config, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 entities.Config
	var r1 error
	if rf, ok := ret.Get(0).(func() (entities.Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() entities.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entities.Config)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockConfigRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *MockConfigRepository_Expecter) Read() *MockConfigRepository_Read_Call {
	return &MockConfigRepository_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *MockConfigRepository_Read_Call) Run(run func()) *MockConfigRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigRepository_Read_Call) Return(_a0 entities.Config, _a1 error) *MockConfigRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigRepository_Read_Call) RunAndReturn(run func() (entities.Config, error)) *MockConfigRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: config
func (_m *MockConfigRepository) Save(config *entities.Config) {
	_m.Called(config)
}

// MockConfigRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockConfigRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - config *entities.Config
func (_e *MockConfigRepository_Expecter) Save(config interface{}) *MockConfigRepository_Save_Call {
	return &MockConfigRepository_Save_Call{Call: _e.mock.On("Save", config)}
}

func (_c *MockConfigRepository_Save_Call) Run(run func(config *entities.Config)) *MockConfigRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Config))
	})
	return _c
}

func (_c *MockConfigRepository_Save_Call) Return() *MockConfigRepository_Save_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfigRepository_Save_Call) RunAndReturn(run func(*entities.Config)) *MockConfigRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigRepository creates a new instance of MockConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigRepository {
	mock := &MockConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
