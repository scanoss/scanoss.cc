// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/scanoss/scanoss.lui/backend/main/pkg/file/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockFileRepository is an autogenerated mock type for the FileRepository type
type MockFileRepository struct {
	mock.Mock
}

type MockFileRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileRepository) EXPECT() *MockFileRepository_Expecter {
	return &MockFileRepository_Expecter{mock: &_m.Mock}
}

// GetComponentByFilePath provides a mock function with given fields: filePath
func (_m *MockFileRepository) GetComponentByFilePath(filePath string) (entities.Component, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByFilePath")
	}

	var r0 entities.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.Component, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) entities.Component); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(entities.Component)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileRepository_GetComponentByFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByFilePath'
type MockFileRepository_GetComponentByFilePath_Call struct {
	*mock.Call
}

// GetComponentByFilePath is a helper method to define mock.On call
//   - filePath string
func (_e *MockFileRepository_Expecter) GetComponentByFilePath(filePath interface{}) *MockFileRepository_GetComponentByFilePath_Call {
	return &MockFileRepository_GetComponentByFilePath_Call{Call: _e.mock.On("GetComponentByFilePath", filePath)}
}

func (_c *MockFileRepository_GetComponentByFilePath_Call) Run(run func(filePath string)) *MockFileRepository_GetComponentByFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileRepository_GetComponentByFilePath_Call) Return(_a0 entities.Component, _a1 error) *MockFileRepository_GetComponentByFilePath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileRepository_GetComponentByFilePath_Call) RunAndReturn(run func(string) (entities.Component, error)) *MockFileRepository_GetComponentByFilePath_Call {
	_c.Call.Return(run)
	return _c
}

// ReadLocalFile provides a mock function with given fields: filePath
func (_m *MockFileRepository) ReadLocalFile(filePath string) (entities.File, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for ReadLocalFile")
	}

	var r0 entities.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.File, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) entities.File); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(entities.File)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileRepository_ReadLocalFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLocalFile'
type MockFileRepository_ReadLocalFile_Call struct {
	*mock.Call
}

// ReadLocalFile is a helper method to define mock.On call
//   - filePath string
func (_e *MockFileRepository_Expecter) ReadLocalFile(filePath interface{}) *MockFileRepository_ReadLocalFile_Call {
	return &MockFileRepository_ReadLocalFile_Call{Call: _e.mock.On("ReadLocalFile", filePath)}
}

func (_c *MockFileRepository_ReadLocalFile_Call) Run(run func(filePath string)) *MockFileRepository_ReadLocalFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileRepository_ReadLocalFile_Call) Return(_a0 entities.File, _a1 error) *MockFileRepository_ReadLocalFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileRepository_ReadLocalFile_Call) RunAndReturn(run func(string) (entities.File, error)) *MockFileRepository_ReadLocalFile_Call {
	_c.Call.Return(run)
	return _c
}

// ReadRemoteFileByMD5 provides a mock function with given fields: path, md5
func (_m *MockFileRepository) ReadRemoteFileByMD5(path string, md5 string) (entities.File, error) {
	ret := _m.Called(path, md5)

	if len(ret) == 0 {
		panic("no return value specified for ReadRemoteFileByMD5")
	}

	var r0 entities.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (entities.File, error)); ok {
		return rf(path, md5)
	}
	if rf, ok := ret.Get(0).(func(string, string) entities.File); ok {
		r0 = rf(path, md5)
	} else {
		r0 = ret.Get(0).(entities.File)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(path, md5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileRepository_ReadRemoteFileByMD5_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadRemoteFileByMD5'
type MockFileRepository_ReadRemoteFileByMD5_Call struct {
	*mock.Call
}

// ReadRemoteFileByMD5 is a helper method to define mock.On call
//   - path string
//   - md5 string
func (_e *MockFileRepository_Expecter) ReadRemoteFileByMD5(path interface{}, md5 interface{}) *MockFileRepository_ReadRemoteFileByMD5_Call {
	return &MockFileRepository_ReadRemoteFileByMD5_Call{Call: _e.mock.On("ReadRemoteFileByMD5", path, md5)}
}

func (_c *MockFileRepository_ReadRemoteFileByMD5_Call) Run(run func(path string, md5 string)) *MockFileRepository_ReadRemoteFileByMD5_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockFileRepository_ReadRemoteFileByMD5_Call) Return(_a0 entities.File, _a1 error) *MockFileRepository_ReadRemoteFileByMD5_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileRepository_ReadRemoteFileByMD5_Call) RunAndReturn(run func(string, string) (entities.File, error)) *MockFileRepository_ReadRemoteFileByMD5_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileRepository creates a new instance of MockFileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileRepository {
	mock := &MockFileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
