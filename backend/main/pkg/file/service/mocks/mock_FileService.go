// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/scanoss/scanoss.lui/backend/main/pkg/file/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockFileService is an autogenerated mock type for the FileService type
type MockFileService struct {
	mock.Mock
}

type MockFileService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileService) EXPECT() *MockFileService_Expecter {
	return &MockFileService_Expecter{mock: &_m.Mock}
}

// GetLocalFileContent provides a mock function with given fields: path
func (_m *MockFileService) GetLocalFileContent(path string) (entities.File, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetLocalFileContent")
	}

	var r0 entities.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.File, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) entities.File); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(entities.File)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileService_GetLocalFileContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalFileContent'
type MockFileService_GetLocalFileContent_Call struct {
	*mock.Call
}

// GetLocalFileContent is a helper method to define mock.On call
//   - path string
func (_e *MockFileService_Expecter) GetLocalFileContent(path interface{}) *MockFileService_GetLocalFileContent_Call {
	return &MockFileService_GetLocalFileContent_Call{Call: _e.mock.On("GetLocalFileContent", path)}
}

func (_c *MockFileService_GetLocalFileContent_Call) Run(run func(path string)) *MockFileService_GetLocalFileContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileService_GetLocalFileContent_Call) Return(_a0 entities.File, _a1 error) *MockFileService_GetLocalFileContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileService_GetLocalFileContent_Call) RunAndReturn(run func(string) (entities.File, error)) *MockFileService_GetLocalFileContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteFileContent provides a mock function with given fields: path, md5
func (_m *MockFileService) GetRemoteFileContent(path string, md5 string) (entities.File, error) {
	ret := _m.Called(path, md5)

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteFileContent")
	}

	var r0 entities.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (entities.File, error)); ok {
		return rf(path, md5)
	}
	if rf, ok := ret.Get(0).(func(string, string) entities.File); ok {
		r0 = rf(path, md5)
	} else {
		r0 = ret.Get(0).(entities.File)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(path, md5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileService_GetRemoteFileContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteFileContent'
type MockFileService_GetRemoteFileContent_Call struct {
	*mock.Call
}

// GetRemoteFileContent is a helper method to define mock.On call
//   - path string
//   - md5 string
func (_e *MockFileService_Expecter) GetRemoteFileContent(path interface{}, md5 interface{}) *MockFileService_GetRemoteFileContent_Call {
	return &MockFileService_GetRemoteFileContent_Call{Call: _e.mock.On("GetRemoteFileContent", path, md5)}
}

func (_c *MockFileService_GetRemoteFileContent_Call) Run(run func(path string, md5 string)) *MockFileService_GetRemoteFileContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockFileService_GetRemoteFileContent_Call) Return(_a0 entities.File, _a1 error) *MockFileService_GetRemoteFileContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileService_GetRemoteFileContent_Call) RunAndReturn(run func(string, string) (entities.File, error)) *MockFileService_GetRemoteFileContent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileService creates a new instance of MockFileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileService {
	mock := &MockFileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
