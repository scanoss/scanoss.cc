// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/scanoss/scanoss.lui/backend/main/pkg/result/entities"

	mock "github.com/stretchr/testify/mock"
)

// ResultMapper is an autogenerated mock type for the ResultMapper type
type ResultMapper struct {
	mock.Mock
}

type ResultMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *ResultMapper) EXPECT() *ResultMapper_Expecter {
	return &ResultMapper_Expecter{mock: &_m.Mock}
}

// MapToResultDTO provides a mock function with given fields: result
func (_m *ResultMapper) MapToResultDTO(result entities.Result) entities.ResultDTO {
	ret := _m.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for MapToResultDTO")
	}

	var r0 entities.ResultDTO
	if rf, ok := ret.Get(0).(func(entities.Result) entities.ResultDTO); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Get(0).(entities.ResultDTO)
	}

	return r0
}

// ResultMapper_MapToResultDTO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapToResultDTO'
type ResultMapper_MapToResultDTO_Call struct {
	*mock.Call
}

// MapToResultDTO is a helper method to define mock.On call
//   - result entities.Result
func (_e *ResultMapper_Expecter) MapToResultDTO(result interface{}) *ResultMapper_MapToResultDTO_Call {
	return &ResultMapper_MapToResultDTO_Call{Call: _e.mock.On("MapToResultDTO", result)}
}

func (_c *ResultMapper_MapToResultDTO_Call) Run(run func(result entities.Result)) *ResultMapper_MapToResultDTO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Result))
	})
	return _c
}

func (_c *ResultMapper_MapToResultDTO_Call) Return(_a0 entities.ResultDTO) *ResultMapper_MapToResultDTO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResultMapper_MapToResultDTO_Call) RunAndReturn(run func(entities.Result) entities.ResultDTO) *ResultMapper_MapToResultDTO_Call {
	_c.Call.Return(run)
	return _c
}

// MapToResultDTOList provides a mock function with given fields: results
func (_m *ResultMapper) MapToResultDTOList(results []entities.Result) []entities.ResultDTO {
	ret := _m.Called(results)

	if len(ret) == 0 {
		panic("no return value specified for MapToResultDTOList")
	}

	var r0 []entities.ResultDTO
	if rf, ok := ret.Get(0).(func([]entities.Result) []entities.ResultDTO); ok {
		r0 = rf(results)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ResultDTO)
		}
	}

	return r0
}

// ResultMapper_MapToResultDTOList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapToResultDTOList'
type ResultMapper_MapToResultDTOList_Call struct {
	*mock.Call
}

// MapToResultDTOList is a helper method to define mock.On call
//   - results []entities.Result
func (_e *ResultMapper_Expecter) MapToResultDTOList(results interface{}) *ResultMapper_MapToResultDTOList_Call {
	return &ResultMapper_MapToResultDTOList_Call{Call: _e.mock.On("MapToResultDTOList", results)}
}

func (_c *ResultMapper_MapToResultDTOList_Call) Run(run func(results []entities.Result)) *ResultMapper_MapToResultDTOList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]entities.Result))
	})
	return _c
}

func (_c *ResultMapper_MapToResultDTOList_Call) Return(_a0 []entities.ResultDTO) *ResultMapper_MapToResultDTOList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResultMapper_MapToResultDTOList_Call) RunAndReturn(run func([]entities.Result) []entities.ResultDTO) *ResultMapper_MapToResultDTOList_Call {
	_c.Call.Return(run)
	return _c
}

// NewResultMapper creates a new instance of ResultMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResultMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResultMapper {
	mock := &ResultMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
