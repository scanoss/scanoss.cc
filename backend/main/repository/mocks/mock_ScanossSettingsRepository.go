// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/scanoss/scanoss.lui/backend/main/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockScanossSettingsRepository is an autogenerated mock type for the ScanossSettingsRepository type
type MockScanossSettingsRepository struct {
	mock.Mock
}

type MockScanossSettingsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScanossSettingsRepository) EXPECT() *MockScanossSettingsRepository_Expecter {
	return &MockScanossSettingsRepository_Expecter{mock: &_m.Mock}
}

// AddBomEntry provides a mock function with given fields: newEntry, filterAction
func (_m *MockScanossSettingsRepository) AddBomEntry(newEntry entities.ComponentFilter, filterAction string) error {
	ret := _m.Called(newEntry, filterAction)

	if len(ret) == 0 {
		panic("no return value specified for AddBomEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ComponentFilter, string) error); ok {
		r0 = rf(newEntry, filterAction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScanossSettingsRepository_AddBomEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBomEntry'
type MockScanossSettingsRepository_AddBomEntry_Call struct {
	*mock.Call
}

// AddBomEntry is a helper method to define mock.On call
//   - newEntry entities.ComponentFilter
//   - filterAction string
func (_e *MockScanossSettingsRepository_Expecter) AddBomEntry(newEntry interface{}, filterAction interface{}) *MockScanossSettingsRepository_AddBomEntry_Call {
	return &MockScanossSettingsRepository_AddBomEntry_Call{Call: _e.mock.On("AddBomEntry", newEntry, filterAction)}
}

func (_c *MockScanossSettingsRepository_AddBomEntry_Call) Run(run func(newEntry entities.ComponentFilter, filterAction string)) *MockScanossSettingsRepository_AddBomEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ComponentFilter), args[1].(string))
	})
	return _c
}

func (_c *MockScanossSettingsRepository_AddBomEntry_Call) Return(_a0 error) *MockScanossSettingsRepository_AddBomEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScanossSettingsRepository_AddBomEntry_Call) RunAndReturn(run func(entities.ComponentFilter, string) error) *MockScanossSettingsRepository_AddBomEntry_Call {
	_c.Call.Return(run)
	return _c
}

// ClearAllFilters provides a mock function with given fields:
func (_m *MockScanossSettingsRepository) ClearAllFilters() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClearAllFilters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScanossSettingsRepository_ClearAllFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearAllFilters'
type MockScanossSettingsRepository_ClearAllFilters_Call struct {
	*mock.Call
}

// ClearAllFilters is a helper method to define mock.On call
func (_e *MockScanossSettingsRepository_Expecter) ClearAllFilters() *MockScanossSettingsRepository_ClearAllFilters_Call {
	return &MockScanossSettingsRepository_ClearAllFilters_Call{Call: _e.mock.On("ClearAllFilters")}
}

func (_c *MockScanossSettingsRepository_ClearAllFilters_Call) Run(run func()) *MockScanossSettingsRepository_ClearAllFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScanossSettingsRepository_ClearAllFilters_Call) Return(_a0 error) *MockScanossSettingsRepository_ClearAllFilters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScanossSettingsRepository_ClearAllFilters_Call) RunAndReturn(run func() error) *MockScanossSettingsRepository_ClearAllFilters_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeclaredPurls provides a mock function with given fields:
func (_m *MockScanossSettingsRepository) GetDeclaredPurls() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeclaredPurls")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockScanossSettingsRepository_GetDeclaredPurls_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeclaredPurls'
type MockScanossSettingsRepository_GetDeclaredPurls_Call struct {
	*mock.Call
}

// GetDeclaredPurls is a helper method to define mock.On call
func (_e *MockScanossSettingsRepository_Expecter) GetDeclaredPurls() *MockScanossSettingsRepository_GetDeclaredPurls_Call {
	return &MockScanossSettingsRepository_GetDeclaredPurls_Call{Call: _e.mock.On("GetDeclaredPurls")}
}

func (_c *MockScanossSettingsRepository_GetDeclaredPurls_Call) Run(run func()) *MockScanossSettingsRepository_GetDeclaredPurls_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScanossSettingsRepository_GetDeclaredPurls_Call) Return(_a0 []string) *MockScanossSettingsRepository_GetDeclaredPurls_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScanossSettingsRepository_GetDeclaredPurls_Call) RunAndReturn(run func() []string) *MockScanossSettingsRepository_GetDeclaredPurls_Call {
	_c.Call.Return(run)
	return _c
}

// GetSettings provides a mock function with given fields:
func (_m *MockScanossSettingsRepository) GetSettings() *entities.SettingsFile {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSettings")
	}

	var r0 *entities.SettingsFile
	if rf, ok := ret.Get(0).(func() *entities.SettingsFile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.SettingsFile)
		}
	}

	return r0
}

// MockScanossSettingsRepository_GetSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettings'
type MockScanossSettingsRepository_GetSettings_Call struct {
	*mock.Call
}

// GetSettings is a helper method to define mock.On call
func (_e *MockScanossSettingsRepository_Expecter) GetSettings() *MockScanossSettingsRepository_GetSettings_Call {
	return &MockScanossSettingsRepository_GetSettings_Call{Call: _e.mock.On("GetSettings")}
}

func (_c *MockScanossSettingsRepository_GetSettings_Call) Run(run func()) *MockScanossSettingsRepository_GetSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScanossSettingsRepository_GetSettings_Call) Return(_a0 *entities.SettingsFile) *MockScanossSettingsRepository_GetSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScanossSettingsRepository_GetSettings_Call) RunAndReturn(run func() *entities.SettingsFile) *MockScanossSettingsRepository_GetSettings_Call {
	_c.Call.Return(run)
	return _c
}

// HasUnsavedChanges provides a mock function with given fields:
func (_m *MockScanossSettingsRepository) HasUnsavedChanges() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasUnsavedChanges")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScanossSettingsRepository_HasUnsavedChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasUnsavedChanges'
type MockScanossSettingsRepository_HasUnsavedChanges_Call struct {
	*mock.Call
}

// HasUnsavedChanges is a helper method to define mock.On call
func (_e *MockScanossSettingsRepository_Expecter) HasUnsavedChanges() *MockScanossSettingsRepository_HasUnsavedChanges_Call {
	return &MockScanossSettingsRepository_HasUnsavedChanges_Call{Call: _e.mock.On("HasUnsavedChanges")}
}

func (_c *MockScanossSettingsRepository_HasUnsavedChanges_Call) Run(run func()) *MockScanossSettingsRepository_HasUnsavedChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScanossSettingsRepository_HasUnsavedChanges_Call) Return(_a0 bool, _a1 error) *MockScanossSettingsRepository_HasUnsavedChanges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScanossSettingsRepository_HasUnsavedChanges_Call) RunAndReturn(run func() (bool, error)) *MockScanossSettingsRepository_HasUnsavedChanges_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields:
func (_m *MockScanossSettingsRepository) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScanossSettingsRepository_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockScanossSettingsRepository_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockScanossSettingsRepository_Expecter) Init() *MockScanossSettingsRepository_Init_Call {
	return &MockScanossSettingsRepository_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockScanossSettingsRepository_Init_Call) Run(run func()) *MockScanossSettingsRepository_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScanossSettingsRepository_Init_Call) Return(_a0 error) *MockScanossSettingsRepository_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScanossSettingsRepository_Init_Call) RunAndReturn(run func() error) *MockScanossSettingsRepository_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields:
func (_m *MockScanossSettingsRepository) Read() (entities.SettingsFile, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 entities.SettingsFile
	var r1 error
	if rf, ok := ret.Get(0).(func() (entities.SettingsFile, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() entities.SettingsFile); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entities.SettingsFile)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScanossSettingsRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockScanossSettingsRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *MockScanossSettingsRepository_Expecter) Read() *MockScanossSettingsRepository_Read_Call {
	return &MockScanossSettingsRepository_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *MockScanossSettingsRepository_Read_Call) Run(run func()) *MockScanossSettingsRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScanossSettingsRepository_Read_Call) Return(_a0 entities.SettingsFile, _a1 error) *MockScanossSettingsRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScanossSettingsRepository_Read_Call) RunAndReturn(run func() (entities.SettingsFile, error)) *MockScanossSettingsRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields:
func (_m *MockScanossSettingsRepository) Save() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScanossSettingsRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockScanossSettingsRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
func (_e *MockScanossSettingsRepository_Expecter) Save() *MockScanossSettingsRepository_Save_Call {
	return &MockScanossSettingsRepository_Save_Call{Call: _e.mock.On("Save")}
}

func (_c *MockScanossSettingsRepository_Save_Call) Run(run func()) *MockScanossSettingsRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScanossSettingsRepository_Save_Call) Return(_a0 error) *MockScanossSettingsRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScanossSettingsRepository_Save_Call) RunAndReturn(run func() error) *MockScanossSettingsRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScanossSettingsRepository creates a new instance of MockScanossSettingsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScanossSettingsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScanossSettingsRepository {
	mock := &MockScanossSettingsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
