// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/scanoss/scanoss.lui/backend/main/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockKeyboardService is an autogenerated mock type for the KeyboardService type
type MockKeyboardService struct {
	mock.Mock
}

type MockKeyboardService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeyboardService) EXPECT() *MockKeyboardService_Expecter {
	return &MockKeyboardService_Expecter{mock: &_m.Mock}
}

// GetGroupedShortcuts provides a mock function with given fields:
func (_m *MockKeyboardService) GetGroupedShortcuts() map[entities.Group][]entities.Shortcut {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGroupedShortcuts")
	}

	var r0 map[entities.Group][]entities.Shortcut
	if rf, ok := ret.Get(0).(func() map[entities.Group][]entities.Shortcut); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[entities.Group][]entities.Shortcut)
		}
	}

	return r0
}

// MockKeyboardService_GetGroupedShortcuts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupedShortcuts'
type MockKeyboardService_GetGroupedShortcuts_Call struct {
	*mock.Call
}

// GetGroupedShortcuts is a helper method to define mock.On call
func (_e *MockKeyboardService_Expecter) GetGroupedShortcuts() *MockKeyboardService_GetGroupedShortcuts_Call {
	return &MockKeyboardService_GetGroupedShortcuts_Call{Call: _e.mock.On("GetGroupedShortcuts")}
}

func (_c *MockKeyboardService_GetGroupedShortcuts_Call) Run(run func()) *MockKeyboardService_GetGroupedShortcuts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyboardService_GetGroupedShortcuts_Call) Return(_a0 map[entities.Group][]entities.Shortcut) *MockKeyboardService_GetGroupedShortcuts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeyboardService_GetGroupedShortcuts_Call) RunAndReturn(run func() map[entities.Group][]entities.Shortcut) *MockKeyboardService_GetGroupedShortcuts_Call {
	_c.Call.Return(run)
	return _c
}

// GetShortcuts provides a mock function with given fields:
func (_m *MockKeyboardService) GetShortcuts() []entities.Shortcut {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetShortcuts")
	}

	var r0 []entities.Shortcut
	if rf, ok := ret.Get(0).(func() []entities.Shortcut); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Shortcut)
		}
	}

	return r0
}

// MockKeyboardService_GetShortcuts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShortcuts'
type MockKeyboardService_GetShortcuts_Call struct {
	*mock.Call
}

// GetShortcuts is a helper method to define mock.On call
func (_e *MockKeyboardService_Expecter) GetShortcuts() *MockKeyboardService_GetShortcuts_Call {
	return &MockKeyboardService_GetShortcuts_Call{Call: _e.mock.On("GetShortcuts")}
}

func (_c *MockKeyboardService_GetShortcuts_Call) Run(run func()) *MockKeyboardService_GetShortcuts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyboardService_GetShortcuts_Call) Return(_a0 []entities.Shortcut) *MockKeyboardService_GetShortcuts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeyboardService_GetShortcuts_Call) RunAndReturn(run func() []entities.Shortcut) *MockKeyboardService_GetShortcuts_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeyboardService creates a new instance of MockKeyboardService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeyboardService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeyboardService {
	mock := &MockKeyboardService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
