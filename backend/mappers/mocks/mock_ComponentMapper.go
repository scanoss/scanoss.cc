// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/scanoss/scanoss.lui/backend/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockComponentMapper is an autogenerated mock type for the ComponentMapper type
type MockComponentMapper struct {
	mock.Mock
}

type MockComponentMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComponentMapper) EXPECT() *MockComponentMapper_Expecter {
	return &MockComponentMapper_Expecter{mock: &_m.Mock}
}

// MapToComponentDTO provides a mock function with given fields: componentEntity
func (_m *MockComponentMapper) MapToComponentDTO(componentEntity entities.Component) entities.ComponentDTO {
	ret := _m.Called(componentEntity)

	if len(ret) == 0 {
		panic("no return value specified for MapToComponentDTO")
	}

	var r0 entities.ComponentDTO
	if rf, ok := ret.Get(0).(func(entities.Component) entities.ComponentDTO); ok {
		r0 = rf(componentEntity)
	} else {
		r0 = ret.Get(0).(entities.ComponentDTO)
	}

	return r0
}

// MockComponentMapper_MapToComponentDTO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapToComponentDTO'
type MockComponentMapper_MapToComponentDTO_Call struct {
	*mock.Call
}

// MapToComponentDTO is a helper method to define mock.On call
//   - componentEntity entities.Component
func (_e *MockComponentMapper_Expecter) MapToComponentDTO(componentEntity interface{}) *MockComponentMapper_MapToComponentDTO_Call {
	return &MockComponentMapper_MapToComponentDTO_Call{Call: _e.mock.On("MapToComponentDTO", componentEntity)}
}

func (_c *MockComponentMapper_MapToComponentDTO_Call) Run(run func(componentEntity entities.Component)) *MockComponentMapper_MapToComponentDTO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Component))
	})
	return _c
}

func (_c *MockComponentMapper_MapToComponentDTO_Call) Return(_a0 entities.ComponentDTO) *MockComponentMapper_MapToComponentDTO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentMapper_MapToComponentDTO_Call) RunAndReturn(run func(entities.Component) entities.ComponentDTO) *MockComponentMapper_MapToComponentDTO_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComponentMapper creates a new instance of MockComponentMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComponentMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComponentMapper {
	mock := &MockComponentMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
