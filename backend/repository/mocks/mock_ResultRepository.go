// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/scanoss/scanoss.lui/backend/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockResultRepository is an autogenerated mock type for the ResultRepository type
type MockResultRepository struct {
	mock.Mock
}

type MockResultRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResultRepository) EXPECT() *MockResultRepository_Expecter {
	return &MockResultRepository_Expecter{mock: &_m.Mock}
}

// GetResults provides a mock function with given fields: filters
func (_m *MockResultRepository) GetResults(filters entities.ResultFilter) ([]entities.Result, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for GetResults")
	}

	var r0 []entities.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ResultFilter) ([]entities.Result, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func(entities.ResultFilter) []entities.Result); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.ResultFilter) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResultRepository_GetResults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResults'
type MockResultRepository_GetResults_Call struct {
	*mock.Call
}

// GetResults is a helper method to define mock.On call
//   - filters entities.ResultFilter
func (_e *MockResultRepository_Expecter) GetResults(filters interface{}) *MockResultRepository_GetResults_Call {
	return &MockResultRepository_GetResults_Call{Call: _e.mock.On("GetResults", filters)}
}

func (_c *MockResultRepository_GetResults_Call) Run(run func(filters entities.ResultFilter)) *MockResultRepository_GetResults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ResultFilter))
	})
	return _c
}

func (_c *MockResultRepository_GetResults_Call) Return(_a0 []entities.Result, _a1 error) *MockResultRepository_GetResults_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResultRepository_GetResults_Call) RunAndReturn(run func(entities.ResultFilter) ([]entities.Result, error)) *MockResultRepository_GetResults_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResultRepository creates a new instance of MockResultRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResultRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResultRepository {
	mock := &MockResultRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
