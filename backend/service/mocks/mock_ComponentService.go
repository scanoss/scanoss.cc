// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/scanoss/scanoss.cc/backend/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockComponentService is an autogenerated mock type for the ComponentService type
type MockComponentService struct {
	mock.Mock
}

type MockComponentService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComponentService) EXPECT() *MockComponentService_Expecter {
	return &MockComponentService_Expecter{mock: &_m.Mock}
}

// CanRedo provides a mock function with given fields:
func (_m *MockComponentService) CanRedo() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CanRedo")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockComponentService_CanRedo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanRedo'
type MockComponentService_CanRedo_Call struct {
	*mock.Call
}

// CanRedo is a helper method to define mock.On call
func (_e *MockComponentService_Expecter) CanRedo() *MockComponentService_CanRedo_Call {
	return &MockComponentService_CanRedo_Call{Call: _e.mock.On("CanRedo")}
}

func (_c *MockComponentService_CanRedo_Call) Run(run func()) *MockComponentService_CanRedo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentService_CanRedo_Call) Return(_a0 bool) *MockComponentService_CanRedo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentService_CanRedo_Call) RunAndReturn(run func() bool) *MockComponentService_CanRedo_Call {
	_c.Call.Return(run)
	return _c
}

// CanUndo provides a mock function with given fields:
func (_m *MockComponentService) CanUndo() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CanUndo")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockComponentService_CanUndo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanUndo'
type MockComponentService_CanUndo_Call struct {
	*mock.Call
}

// CanUndo is a helper method to define mock.On call
func (_e *MockComponentService_Expecter) CanUndo() *MockComponentService_CanUndo_Call {
	return &MockComponentService_CanUndo_Call{Call: _e.mock.On("CanUndo")}
}

func (_c *MockComponentService_CanUndo_Call) Run(run func()) *MockComponentService_CanUndo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentService_CanUndo_Call) Return(_a0 bool) *MockComponentService_CanUndo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentService_CanUndo_Call) RunAndReturn(run func() bool) *MockComponentService_CanUndo_Call {
	_c.Call.Return(run)
	return _c
}

// FilterComponents provides a mock function with given fields: dto
func (_m *MockComponentService) FilterComponents(dto []entities.ComponentFilterDTO) error {
	ret := _m.Called(dto)

	if len(ret) == 0 {
		panic("no return value specified for FilterComponents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]entities.ComponentFilterDTO) error); ok {
		r0 = rf(dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComponentService_FilterComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterComponents'
type MockComponentService_FilterComponents_Call struct {
	*mock.Call
}

// FilterComponents is a helper method to define mock.On call
//   - dto []entities.ComponentFilterDTO
func (_e *MockComponentService_Expecter) FilterComponents(dto interface{}) *MockComponentService_FilterComponents_Call {
	return &MockComponentService_FilterComponents_Call{Call: _e.mock.On("FilterComponents", dto)}
}

func (_c *MockComponentService_FilterComponents_Call) Run(run func(dto []entities.ComponentFilterDTO)) *MockComponentService_FilterComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]entities.ComponentFilterDTO))
	})
	return _c
}

func (_c *MockComponentService_FilterComponents_Call) Return(_a0 error) *MockComponentService_FilterComponents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentService_FilterComponents_Call) RunAndReturn(run func([]entities.ComponentFilterDTO) error) *MockComponentService_FilterComponents_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentByPath provides a mock function with given fields: filePath
func (_m *MockComponentService) GetComponentByPath(filePath string) (entities.ComponentDTO, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByPath")
	}

	var r0 entities.ComponentDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entities.ComponentDTO, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) entities.ComponentDTO); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(entities.ComponentDTO)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockComponentService_GetComponentByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByPath'
type MockComponentService_GetComponentByPath_Call struct {
	*mock.Call
}

// GetComponentByPath is a helper method to define mock.On call
//   - filePath string
func (_e *MockComponentService_Expecter) GetComponentByPath(filePath interface{}) *MockComponentService_GetComponentByPath_Call {
	return &MockComponentService_GetComponentByPath_Call{Call: _e.mock.On("GetComponentByPath", filePath)}
}

func (_c *MockComponentService_GetComponentByPath_Call) Run(run func(filePath string)) *MockComponentService_GetComponentByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockComponentService_GetComponentByPath_Call) Return(_a0 entities.ComponentDTO, _a1 error) *MockComponentService_GetComponentByPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockComponentService_GetComponentByPath_Call) RunAndReturn(run func(string) (entities.ComponentDTO, error)) *MockComponentService_GetComponentByPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeclaredComponents provides a mock function with given fields:
func (_m *MockComponentService) GetDeclaredComponents() ([]entities.DeclaredComponent, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeclaredComponents")
	}

	var r0 []entities.DeclaredComponent
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.DeclaredComponent, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.DeclaredComponent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.DeclaredComponent)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockComponentService_GetDeclaredComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeclaredComponents'
type MockComponentService_GetDeclaredComponents_Call struct {
	*mock.Call
}

// GetDeclaredComponents is a helper method to define mock.On call
func (_e *MockComponentService_Expecter) GetDeclaredComponents() *MockComponentService_GetDeclaredComponents_Call {
	return &MockComponentService_GetDeclaredComponents_Call{Call: _e.mock.On("GetDeclaredComponents")}
}

func (_c *MockComponentService_GetDeclaredComponents_Call) Run(run func()) *MockComponentService_GetDeclaredComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentService_GetDeclaredComponents_Call) Return(_a0 []entities.DeclaredComponent, _a1 error) *MockComponentService_GetDeclaredComponents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockComponentService_GetDeclaredComponents_Call) RunAndReturn(run func() ([]entities.DeclaredComponent, error)) *MockComponentService_GetDeclaredComponents_Call {
	_c.Call.Return(run)
	return _c
}

// Redo provides a mock function with given fields:
func (_m *MockComponentService) Redo() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Redo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComponentService_Redo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redo'
type MockComponentService_Redo_Call struct {
	*mock.Call
}

// Redo is a helper method to define mock.On call
func (_e *MockComponentService_Expecter) Redo() *MockComponentService_Redo_Call {
	return &MockComponentService_Redo_Call{Call: _e.mock.On("Redo")}
}

func (_c *MockComponentService_Redo_Call) Run(run func()) *MockComponentService_Redo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentService_Redo_Call) Return(_a0 error) *MockComponentService_Redo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentService_Redo_Call) RunAndReturn(run func() error) *MockComponentService_Redo_Call {
	_c.Call.Return(run)
	return _c
}

// Undo provides a mock function with given fields:
func (_m *MockComponentService) Undo() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Undo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComponentService_Undo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Undo'
type MockComponentService_Undo_Call struct {
	*mock.Call
}

// Undo is a helper method to define mock.On call
func (_e *MockComponentService_Expecter) Undo() *MockComponentService_Undo_Call {
	return &MockComponentService_Undo_Call{Call: _e.mock.On("Undo")}
}

func (_c *MockComponentService_Undo_Call) Run(run func()) *MockComponentService_Undo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentService_Undo_Call) Return(_a0 error) *MockComponentService_Undo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentService_Undo_Call) RunAndReturn(run func() error) *MockComponentService_Undo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComponentService creates a new instance of MockComponentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComponentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComponentService {
	mock := &MockComponentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
