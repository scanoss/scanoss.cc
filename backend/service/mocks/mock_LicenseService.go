// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/scanoss/scanoss.lui/backend/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockLicenseService is an autogenerated mock type for the LicenseService type
type MockLicenseService struct {
	mock.Mock
}

type MockLicenseService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLicenseService) EXPECT() *MockLicenseService_Expecter {
	return &MockLicenseService_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields:
func (_m *MockLicenseService) GetAll() ([]entities.License, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entities.License
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.License, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.License); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.License)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLicenseService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockLicenseService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockLicenseService_Expecter) GetAll() *MockLicenseService_GetAll_Call {
	return &MockLicenseService_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockLicenseService_GetAll_Call) Run(run func()) *MockLicenseService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLicenseService_GetAll_Call) Return(_a0 []entities.License, _a1 error) *MockLicenseService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLicenseService_GetAll_Call) RunAndReturn(run func() ([]entities.License, error)) *MockLicenseService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLicenseService creates a new instance of MockLicenseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLicenseService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLicenseService {
	mock := &MockLicenseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
