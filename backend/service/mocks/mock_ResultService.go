// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/scanoss/scanoss.cc/backend/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockResultService is an autogenerated mock type for the ResultService type
type MockResultService struct {
	mock.Mock
}

type MockResultService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResultService) EXPECT() *MockResultService_Expecter {
	return &MockResultService_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: dto
func (_m *MockResultService) GetAll(dto *entities.RequestResultDTO) ([]entities.ResultDTO, error) {
	ret := _m.Called(dto)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entities.ResultDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.RequestResultDTO) ([]entities.ResultDTO, error)); ok {
		return rf(dto)
	}
	if rf, ok := ret.Get(0).(func(*entities.RequestResultDTO) []entities.ResultDTO); ok {
		r0 = rf(dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ResultDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.RequestResultDTO) error); ok {
		r1 = rf(dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResultService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockResultService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - dto *entities.RequestResultDTO
func (_e *MockResultService_Expecter) GetAll(dto interface{}) *MockResultService_GetAll_Call {
	return &MockResultService_GetAll_Call{Call: _e.mock.On("GetAll", dto)}
}

func (_c *MockResultService_GetAll_Call) Run(run func(dto *entities.RequestResultDTO)) *MockResultService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.RequestResultDTO))
	})
	return _c
}

func (_c *MockResultService_GetAll_Call) Return(_a0 []entities.ResultDTO, _a1 error) *MockResultService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResultService_GetAll_Call) RunAndReturn(run func(*entities.RequestResultDTO) ([]entities.ResultDTO, error)) *MockResultService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// SetContext provides a mock function with given fields: ctx
func (_m *MockResultService) SetContext(ctx context.Context) {
	_m.Called(ctx)
}

// MockResultService_SetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetContext'
type MockResultService_SetContext_Call struct {
	*mock.Call
}

// SetContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockResultService_Expecter) SetContext(ctx interface{}) *MockResultService_SetContext_Call {
	return &MockResultService_SetContext_Call{Call: _e.mock.On("SetContext", ctx)}
}

func (_c *MockResultService_SetContext_Call) Run(run func(ctx context.Context)) *MockResultService_SetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockResultService_SetContext_Call) Return() *MockResultService_SetContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResultService_SetContext_Call) RunAndReturn(run func(context.Context)) *MockResultService_SetContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResultService creates a new instance of MockResultService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResultService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResultService {
	mock := &MockResultService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
