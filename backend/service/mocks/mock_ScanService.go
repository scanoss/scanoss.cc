// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockScanService is an autogenerated mock type for the ScanService type
type MockScanService struct {
	mock.Mock
}

type MockScanService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScanService) EXPECT() *MockScanService_Expecter {
	return &MockScanService_Expecter{mock: &_m.Mock}
}

// CheckDependencies provides a mock function with given fields:
func (_m *MockScanService) CheckDependencies() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckDependencies")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScanService_CheckDependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckDependencies'
type MockScanService_CheckDependencies_Call struct {
	*mock.Call
}

// CheckDependencies is a helper method to define mock.On call
func (_e *MockScanService_Expecter) CheckDependencies() *MockScanService_CheckDependencies_Call {
	return &MockScanService_CheckDependencies_Call{Call: _e.mock.On("CheckDependencies")}
}

func (_c *MockScanService_CheckDependencies_Call) Run(run func()) *MockScanService_CheckDependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScanService_CheckDependencies_Call) Return(_a0 error) *MockScanService_CheckDependencies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScanService_CheckDependencies_Call) RunAndReturn(run func() error) *MockScanService_CheckDependencies_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultScanArgs provides a mock function with given fields:
func (_m *MockScanService) GetDefaultScanArgs() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultScanArgs")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockScanService_GetDefaultScanArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultScanArgs'
type MockScanService_GetDefaultScanArgs_Call struct {
	*mock.Call
}

// GetDefaultScanArgs is a helper method to define mock.On call
func (_e *MockScanService_Expecter) GetDefaultScanArgs() *MockScanService_GetDefaultScanArgs_Call {
	return &MockScanService_GetDefaultScanArgs_Call{Call: _e.mock.On("GetDefaultScanArgs")}
}

func (_c *MockScanService_GetDefaultScanArgs_Call) Run(run func()) *MockScanService_GetDefaultScanArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScanService_GetDefaultScanArgs_Call) Return(_a0 []string) *MockScanService_GetDefaultScanArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScanService_GetDefaultScanArgs_Call) RunAndReturn(run func() []string) *MockScanService_GetDefaultScanArgs_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function with given fields: args
func (_m *MockScanService) Scan(args []string) error {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScanService_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockScanService_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - args []string
func (_e *MockScanService_Expecter) Scan(args interface{}) *MockScanService_Scan_Call {
	return &MockScanService_Scan_Call{Call: _e.mock.On("Scan", args)}
}

func (_c *MockScanService_Scan_Call) Run(run func(args []string)) *MockScanService_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockScanService_Scan_Call) Return(_a0 error) *MockScanService_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScanService_Scan_Call) RunAndReturn(run func([]string) error) *MockScanService_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// ScanStream provides a mock function with given fields: args
func (_m *MockScanService) ScanStream(args []string) error {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for ScanStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScanService_ScanStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanStream'
type MockScanService_ScanStream_Call struct {
	*mock.Call
}

// ScanStream is a helper method to define mock.On call
//   - args []string
func (_e *MockScanService_Expecter) ScanStream(args interface{}) *MockScanService_ScanStream_Call {
	return &MockScanService_ScanStream_Call{Call: _e.mock.On("ScanStream", args)}
}

func (_c *MockScanService_ScanStream_Call) Run(run func(args []string)) *MockScanService_ScanStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockScanService_ScanStream_Call) Return(_a0 error) *MockScanService_ScanStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScanService_ScanStream_Call) RunAndReturn(run func([]string) error) *MockScanService_ScanStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScanService creates a new instance of MockScanService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScanService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScanService {
	mock := &MockScanService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
